#!groovy

pipeline {
    // using same agnert as ConfigCheck job
    agent {
        label {
            label 'ConfigCheck'
        }
    }

    triggers {
        cron('H 8 * * *')
    }

    options {
        disableConcurrentBuilds()
        timestamps()
        // as we "checkout scm" as a stage, we do not need to do it here too
        skipDefaultCheckout(true)
    }
    environment {
        SSH_CREDENTIALS = credentials('SSH')
        TEST_INSTRUMENT_LIST = "${TEST_INSTRUMENT_LIST}"
        USE_TEST_INSTRUMENT_LIST = "${USE_TEST_INSTRUMENT_LIST}"
        DEBUG_MODE = "${DEBUG_MODE}"
        REPO_DIR = "C:\\Instrument\\Settings\\config\\common"
        UPSTREAM_BRANCH_CONFIG = "master"
        SHOW_UNCOMMITTED_CHANGES_MESSAGES="false"
    }

    stages {
        stage('Checkout') {
            steps {
                timeout(time: 2, unit: 'HOURS') {
                    retry(5) {
                        checkout scm
                    }
                }
            }
        }

        stage('Check Instrument has any Hotfixes and then any uncommitteed changes') {
            steps {
                echo 'Check Instrument has any commits or any uncommitteed changes'
                timeout(time: 1, unit: 'HOURS') {
                    bat '''
                        call get_python.bat
                        call utils/jenkins_utils/hotfix_checker.bat
                        call \\\\isis.cclrc.ac.uk\\Shares\\ISIS_Experiment_Controls_Public\\ibex_utils\\installation_and_upgrade\\remove_genie_python.bat %LATEST_PYTHON_DIR%
                    '''
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "git_status/*.txt", caseSensitive: false
            logParser([
                projectRulePath: 'parse_rules',
                parsingRulesPath: '',
                showGraphs: true,
                unstableOnWarning: true,
                useProjectRule: true,
            ])
        }
    }
}
